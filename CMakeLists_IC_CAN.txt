cmake_minimum_required(VERSION 3.16)
project(IC_CAN_Demo)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Add dm-tools SDK include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/dm-tools/USB2FDCAN/SDK/C++/ubuntu/include
    ${CMAKE_CURRENT_SOURCE_DIR}/src
)

# Add dm-tools SDK object files
set(DM_TOOLS_OBJECTS
    ${CMAKE_CURRENT_SOURCE_DIR}/dm-tools/USB2FDCAN/SDK/C++/ubuntu/lib/usb_class.cpp.o
    ${CMAKE_CURRENT_SOURCE_DIR}/dm-tools/USB2FDCAN/SDK/C++/ubuntu/lib/crc.cpp.o
)

# Find required packages
find_package(PkgConfig REQUIRED)
pkg_check_modules(USB REQUIRED libusb-1.0)

# Create IC_CAN demo executable
add_executable(ic_can_demo
    src/ic_can/core/ic_can_demo.cpp
    src/ic_can/core/ic_can_working.cpp
    ${DM_TOOLS_OBJECTS}
)

# Link libraries
target_link_libraries(ic_can_demo
    ${USB_LIBRARIES}
    pthread
)

# Add compile options
target_compile_options(ic_can_demo PRIVATE ${USB_CFLAGS_OTHER})

# Set output directory
set_target_properties(ic_can_demo PROPERTIES
    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}
)

# Print build information
message(STATUS "Building IC_CAN Demo")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "USB Libraries: ${USB_LIBRARIES}")
message(STATUS "USB Flags: ${USB_CFLAGS_OTHER}")